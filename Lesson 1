require 'date'

class Student
  @@students = []

  attr_reader :surname, :name, :date_of_birth

  def initialize(surname, name, date_of_birth)
    @surname = surname
    @name = name
    @date_of_birth = validate_date_of_birth(date_of_birth)
    add_student
  end

  def validate_date_of_birth(date_of_birth)
    dob = Date.parse(date_of_birth)
    raise ArgumentError, "Date of birth must be in the past." if dob >= Date.today
    dob
  rescue ArgumentError
    raise ArgumentError, "Invalid date format."
  end

  def calculate_age
    today = Date.today
    age = today.year - @date_of_birth.year
    age -= 1 if (today.month < @date_of_birth.month) || (today.month == @date_of_birth.month && today.day < @date_of_birth.day)
    age
  end

  def add_student
    unless @@students.any? { |s| s.surname == @surname && s.name == @name && s.date_of_birth == @date_of_birth }
      @@students << self
    end
  end

  def self.remove_student(surname, name, date_of_birth)
    @@students.delete_if { |s| s.surname == surname && s.name == name && s.date_of_birth == date_of_birth }
  end

  def self.get_students_by_age(age)
    @@students.select { |s| s.calculate_age == age }
  end

  def self.get_students_by_name(name)
    @@students.select { |s| s.name == name }
  end

  def self.all_students
    @@students
  end

  def to_s
    "Student(surname: #{@surname}, name: #{@name}, date_of_birth: #{@date_of_birth})"
  end
end

s1 = Student.new("Doe", "John", "2000-05-15")
s2 = Student.new("Smith", "Jane", "1998-04-20")

puts "Студенти віком 24 роки:"
students_age_24 = Student.get_students_by_age(24)
students_age_24.each { |student| puts student }

puts "Студенти з іменем Jane:"
students_named_jane = Student.get_students_by_name("Jane")
students_named_jane.each { |student| puts student }

puts "Усі студенти:"
Student.all_students.each { |student| puts student }
